{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hackweek Introduction Overview Welcome to the Cryospheric Sciences with ICESat-2 hackweek! Hackweeks were originally designed by the University of Washington's eScience Institute , and they aim to provide a welcoming learning environment where you can learn new software tools, collaborate with colleagues, build community and make progress on specific projects. Our hackweek model is constantly evolving and we invite you actively participate as we experiment with new approaches and ideas. This preliminary tutorial is one that we would like you to complete before arriving to the hackweek. The purpose is to learn about how we plan to work with various software tools and how you can best prepare for our event. We would like everyone works through this tutorial so that we can make the best use of our time together in person. What is the format of this event? Here is a general roadmap of our event: we begin the hackweek with a review of our code of conduct, and we build a set of guidelines for co-creating a positive and welcoming learning environment each day will include some combination of tutorials, short presentations and/or open project time / hacking. we will guide participants through the formation of groups early in the event *we'll check-in with project teams on a regular basis to find what's working and where challenges lie. there will be opportunities for peer learning and open tutorials on topics of most interest to the group participants will be invited to present their work at the end of the event Will my laptop work for this hackathon? All participants will be required to have their own laptop. The absolute minimum requirement is any laptop with a functioning web browser so that you can access our shared cloud computing resources. We will also teach you to install software on your own computer. For that we recommend the following: Windows Vista or newer, MAC OS X 10.7+, or Linux (Ubuntu, RedHat and others; CentOS 5+) 32-bit or 64-bit Minimum 3 GB disk space to download and install software If you do not have a laptop, please contact us and we might be able to loan you one during the event. Will I need to learn a specific programming language to participate? We welcome all participants regardless of their programming background. In order to teach our content in a consistent way we need to select one programming languge. We have chosen Python because it is free and open source, and has many libraries suitable for efficient manipulation of a variety of different types of data. What can I do in advance to prepare? We require all participants to work through the following lessons in advance of our event. The lessons are brief and will ensure that we are all set up and ready to work when we arrive. Setting up your laptop and getting access to computing resources Lesson 1 : setting up a GitHub account Lesson 2 : connecting to our shared cloud computing environment Lesson 3 : installing Python on your laptop Lesson 4 : getting a NASA Earthdata login Learning Python Basics Lesson 5 : introduction to Numpy Lesson 6 : introduction to Pandas How do I ask questions about the Hackweek? If you have technical or general questions about the Hackweek, we are here to help. First, you can use the General channel on Slack . Second, we will offer a schedule of online \"office hours\" for you to get help as you work through the tutorials above. Online Office Hours Schedule Here is the zoom link for all of the office hour sessions. Date Time Lesson Topic January x, 2020 2:00 PM Pacific Time Lessons 1 and 2 (provide links to code of conduct and norms of behavior as they apply to these calls as well)","title":"Home"},{"location":"#hackweek-introduction","text":"","title":"Hackweek Introduction"},{"location":"#overview","text":"Welcome to the Cryospheric Sciences with ICESat-2 hackweek! Hackweeks were originally designed by the University of Washington's eScience Institute , and they aim to provide a welcoming learning environment where you can learn new software tools, collaborate with colleagues, build community and make progress on specific projects. Our hackweek model is constantly evolving and we invite you actively participate as we experiment with new approaches and ideas. This preliminary tutorial is one that we would like you to complete before arriving to the hackweek. The purpose is to learn about how we plan to work with various software tools and how you can best prepare for our event. We would like everyone works through this tutorial so that we can make the best use of our time together in person.","title":"Overview"},{"location":"#what-is-the-format-of-this-event","text":"Here is a general roadmap of our event: we begin the hackweek with a review of our code of conduct, and we build a set of guidelines for co-creating a positive and welcoming learning environment each day will include some combination of tutorials, short presentations and/or open project time / hacking. we will guide participants through the formation of groups early in the event *we'll check-in with project teams on a regular basis to find what's working and where challenges lie. there will be opportunities for peer learning and open tutorials on topics of most interest to the group participants will be invited to present their work at the end of the event","title":"What is the format of this event?"},{"location":"#will-my-laptop-work-for-this-hackathon","text":"All participants will be required to have their own laptop. The absolute minimum requirement is any laptop with a functioning web browser so that you can access our shared cloud computing resources. We will also teach you to install software on your own computer. For that we recommend the following: Windows Vista or newer, MAC OS X 10.7+, or Linux (Ubuntu, RedHat and others; CentOS 5+) 32-bit or 64-bit Minimum 3 GB disk space to download and install software If you do not have a laptop, please contact us and we might be able to loan you one during the event.","title":"Will my laptop work for this hackathon?"},{"location":"#will-i-need-to-learn-a-specific-programming-language-to-participate","text":"We welcome all participants regardless of their programming background. In order to teach our content in a consistent way we need to select one programming languge. We have chosen Python because it is free and open source, and has many libraries suitable for efficient manipulation of a variety of different types of data.","title":"Will I need to learn a specific programming language to participate?"},{"location":"#what-can-i-do-in-advance-to-prepare","text":"We require all participants to work through the following lessons in advance of our event. The lessons are brief and will ensure that we are all set up and ready to work when we arrive.","title":"What can I do in advance to prepare?"},{"location":"#setting-up-your-laptop-and-getting-access-to-computing-resources","text":"Lesson 1 : setting up a GitHub account Lesson 2 : connecting to our shared cloud computing environment Lesson 3 : installing Python on your laptop Lesson 4 : getting a NASA Earthdata login","title":"Setting up your laptop and getting access to computing resources"},{"location":"#learning-python-basics","text":"Lesson 5 : introduction to Numpy Lesson 6 : introduction to Pandas","title":"Learning Python Basics"},{"location":"#how-do-i-ask-questions-about-the-hackweek","text":"If you have technical or general questions about the Hackweek, we are here to help. First, you can use the General channel on Slack . Second, we will offer a schedule of online \"office hours\" for you to get help as you work through the tutorials above.","title":"How do I ask questions about the Hackweek?"},{"location":"#online-office-hours-schedule","text":"Here is the zoom link for all of the office hour sessions. Date Time Lesson Topic January x, 2020 2:00 PM Pacific Time Lessons 1 and 2 (provide links to code of conduct and norms of behavior as they apply to these calls as well)","title":"Online Office Hours Schedule"},{"location":"conda/","text":"Conda Basics Overview In the previous lesson we showed you a cloud-based environment for our work during the hackweek. What happens after the event when you want to go home and work with all the libraries we showed you? You will likely also want to have a functioning version of Python on your local laptop if that is not already in place. So this lesson takes you through our recommended procedure for doing that. We suggest you get this set up in advance so that we can help you troubleshoot when you arrive. Python Software Python software is distributed as a series of libraries that are called within your code to perform certain tasks. There are many different collections, or distributions of Python software. Generally you install a specific distribution of Python and then add additional libraries as you need them. There are also several different versions of Python. The two main versions right now are 2.7 and 3.7, although Python 2.7 will not be supported past 2020. Some libraries only work with specific versions of Python. So even though Python is one of the most adaptable, easy-to-use software systems, you can see there are still complexities to work out and potential challenges when delivering content to a large group. Therefore we have a number of different ways that we are trying to simplify this process to maximize your learning during the hackweek. We also provide instructions for using Anaconda , which is our recommended Python distribution, for installing and working with Python on your local computer. We can assist in setting up \"conda\" environments that will simplify the gathering of Python libraries and version specific to the tutorial you are working on. What is Conda? Conda is an open source package and environment management system for any programming languages, but very popular among python community, for installing multiple versions of software packages, their dependencies and switching easily between them. It works on Linux, OS X and Windows. Installing Miniconda Windows Click here to download the proper installer for your Windows platform (64 bits). We recommend to download the Python 3 version of Miniconda. You can still create Python 2 environments using the Python 3 version of Miniconda. When installing, you will be asked if you wish to make the Anaconda Python your default Python for Windows. If you do not have any other installation that is a good option. If you want to keep multiple versions of python on your machine (e.g. ESRI-supplied python, or 64 bit versions of Anaconda), then don't select the option to modify your path or modify your windows registry settings. Linux and OSX You may follow manual steps from here similar to the instructions on Windows (see above). Alternatively, you can execute these commands on a terminal shell (in this case, the bash shell): # For MacOSX url=https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh # For Linux url=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh wget $url -O miniconda.sh bash miniconda.sh -b -p $HOME/miniconda export PATH=\"$HOME/miniconda/bin:$PATH\" conda update conda --yes Installing Anaconda (Optional) NOTE: If you don't have time or disk space for the entire distribution do not install Anaconda. Install only Miniconda , a bootstrap version of Anaconda, which contains only Python, essential packages, and conda. We will provide an environment file to install all the packages necessary for the hackweek. Anaconda is a data science platform that comes with a lot of packages. At its core, Anaconda uses the conda package management system. The list of packages included can be found here To install Anaconda, please click on the link below for your operating system, and follow the instructions on the site . Once Anaconda installation step is finished run python in the command line to test if Anaconda is installed correctly. Note: For windows, please use the Anaconda prompt as the command line. It should be installed with your installation of Anaconda If Anaconda is installed correctly, you should have this prompt, which emphasizes Anaconda : $ python Python 3.7.3|Anaconda custom (x86_64)| (default, Mar 27 2019, 22:11:17) ... Installing Python We will be using Python 3.6 or 3.7 during the week (either will work). Since Anaconda (on Linux) expects you to work in the \"bash\" shell, if this is not already your default shell, you need to set it to be so (use the \"chsh -s /bin/bash\" command to change your default shell to bash) or just run an instance of bash from the command line before issuing \"Conda\" commands (/bin/bash or where it is located on your system). If you are already familiar with Python 2.7, you can take a look at the syntax differences here , but the main point to remember is to put the print statements in parentheses: print('Hello World!') $ conda create -n py37 python=3.7 To use Python 3.7: $ conda activate py37 To check if you have the correct version: $ python --version","title":"Lesson 3"},{"location":"conda/#conda-basics","text":"","title":"Conda Basics"},{"location":"conda/#overview","text":"In the previous lesson we showed you a cloud-based environment for our work during the hackweek. What happens after the event when you want to go home and work with all the libraries we showed you? You will likely also want to have a functioning version of Python on your local laptop if that is not already in place. So this lesson takes you through our recommended procedure for doing that. We suggest you get this set up in advance so that we can help you troubleshoot when you arrive.","title":"Overview"},{"location":"conda/#python-software","text":"Python software is distributed as a series of libraries that are called within your code to perform certain tasks. There are many different collections, or distributions of Python software. Generally you install a specific distribution of Python and then add additional libraries as you need them. There are also several different versions of Python. The two main versions right now are 2.7 and 3.7, although Python 2.7 will not be supported past 2020. Some libraries only work with specific versions of Python. So even though Python is one of the most adaptable, easy-to-use software systems, you can see there are still complexities to work out and potential challenges when delivering content to a large group. Therefore we have a number of different ways that we are trying to simplify this process to maximize your learning during the hackweek. We also provide instructions for using Anaconda , which is our recommended Python distribution, for installing and working with Python on your local computer. We can assist in setting up \"conda\" environments that will simplify the gathering of Python libraries and version specific to the tutorial you are working on.","title":"Python Software"},{"location":"conda/#what-is-conda","text":"Conda is an open source package and environment management system for any programming languages, but very popular among python community, for installing multiple versions of software packages, their dependencies and switching easily between them. It works on Linux, OS X and Windows.","title":"What is Conda?"},{"location":"conda/#installing-miniconda","text":"","title":"Installing Miniconda"},{"location":"conda/#windows","text":"Click here to download the proper installer for your Windows platform (64 bits). We recommend to download the Python 3 version of Miniconda. You can still create Python 2 environments using the Python 3 version of Miniconda. When installing, you will be asked if you wish to make the Anaconda Python your default Python for Windows. If you do not have any other installation that is a good option. If you want to keep multiple versions of python on your machine (e.g. ESRI-supplied python, or 64 bit versions of Anaconda), then don't select the option to modify your path or modify your windows registry settings.","title":"Windows"},{"location":"conda/#linux-and-osx","text":"You may follow manual steps from here similar to the instructions on Windows (see above). Alternatively, you can execute these commands on a terminal shell (in this case, the bash shell): # For MacOSX url=https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh # For Linux url=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh wget $url -O miniconda.sh bash miniconda.sh -b -p $HOME/miniconda export PATH=\"$HOME/miniconda/bin:$PATH\" conda update conda --yes","title":"Linux and OSX"},{"location":"conda/#installing-anaconda-optional","text":"NOTE: If you don't have time or disk space for the entire distribution do not install Anaconda. Install only Miniconda , a bootstrap version of Anaconda, which contains only Python, essential packages, and conda. We will provide an environment file to install all the packages necessary for the hackweek. Anaconda is a data science platform that comes with a lot of packages. At its core, Anaconda uses the conda package management system. The list of packages included can be found here To install Anaconda, please click on the link below for your operating system, and follow the instructions on the site . Once Anaconda installation step is finished run python in the command line to test if Anaconda is installed correctly. Note: For windows, please use the Anaconda prompt as the command line. It should be installed with your installation of Anaconda If Anaconda is installed correctly, you should have this prompt, which emphasizes Anaconda : $ python Python 3.7.3|Anaconda custom (x86_64)| (default, Mar 27 2019, 22:11:17) ...","title":"Installing Anaconda (Optional)"},{"location":"conda/#installing-python","text":"We will be using Python 3.6 or 3.7 during the week (either will work). Since Anaconda (on Linux) expects you to work in the \"bash\" shell, if this is not already your default shell, you need to set it to be so (use the \"chsh -s /bin/bash\" command to change your default shell to bash) or just run an instance of bash from the command line before issuing \"Conda\" commands (/bin/bash or where it is located on your system). If you are already familiar with Python 2.7, you can take a look at the syntax differences here , but the main point to remember is to put the print statements in parentheses: print('Hello World!') $ conda create -n py37 python=3.7 To use Python 3.7: $ conda activate py37 To check if you have the correct version: $ python --version","title":"Installing Python"},{"location":"earthdata/","text":"NASA Earthdata login Overview One of our earliest tutorials involves learning how to download ICESat-2 data directly from NASA's data portals. NASA maintains a number of different portals, but we'll be using the Earthdata portal. NASA Earthdata provides a convenient web map interface to a wide range of NASA earth observations. The data are stored at one of several Distributed Active Archive Centers (DAACs). We will be accessing ICESat-2 data from the National Snow and Ice Data Center DAAC. Why do I need an Earthdata login? Each participant will need a login. We will be teaching you ways to programmatically access ICESat-2 data from within your Python scripts. You will need to enter your Earthdata username and password in order for this to work. Getting an Earthdata login If you do not already have an Earthdata login, then navigate to the Earthdata Login page: Enter a username and password, and then record this somewhere for use during the data access tutorial.","title":"Lesson 4"},{"location":"earthdata/#nasa-earthdata-login","text":"","title":"NASA Earthdata login"},{"location":"earthdata/#overview","text":"One of our earliest tutorials involves learning how to download ICESat-2 data directly from NASA's data portals. NASA maintains a number of different portals, but we'll be using the Earthdata portal. NASA Earthdata provides a convenient web map interface to a wide range of NASA earth observations. The data are stored at one of several Distributed Active Archive Centers (DAACs). We will be accessing ICESat-2 data from the National Snow and Ice Data Center DAAC.","title":"Overview"},{"location":"earthdata/#why-do-i-need-an-earthdata-login","text":"Each participant will need a login. We will be teaching you ways to programmatically access ICESat-2 data from within your Python scripts. You will need to enter your Earthdata username and password in order for this to work.","title":"Why do I need an Earthdata login?"},{"location":"earthdata/#getting-an-earthdata-login","text":"If you do not already have an Earthdata login, then navigate to the Earthdata Login page: Enter a username and password, and then record this somewhere for use during the data access tutorial.","title":"Getting an Earthdata login"},{"location":"github/","text":"GitHub What is Git/GitHub? Git is a popular version control system that is the foundation of most open source software development. You are not required to know Git in advance of this event, but come prepared to learn a lot about it! GitHub is a hosting service for Git repositories, enabling us to share code across teams in a web environment. What if I do not have the git command on my local machine? If you don't have Git installed on you local machine, you can download the latest installer on Git-SCM . More help for the install process can be found in the official Git documentation Why do I need a GitHub account? There are three reasons you are required to have a GitHub account for the hackweek: We use GitHub credentialing to give everyone access to our cloud computing resources All of our tutorials and project work will be shared on GitHub You will want a GitHub account to practice everything you'll be learning during the Git/GitHub tutorials So, if you don't already have a GitHub account, just navigate to GitHub : Then, click on the big green button and then answer a few required questions. Be sure to save your password somewhere safe because you will need it later! Why are we joining a GitHub Organization? GitHub organizations are a convenient way for teams to get all content relevant to a specific project our workshop into one place. By having everything in one central location you will spend less time searching for hackweek content. GitHub organizations have ``teams'' that offer simple ways to provide respository access to groups of people, rather than individuals. We have created a GitHub organization called Cryospheric Sciences with ICESat-2 . For security purposes you can only join the organization by invitation. Here are the steps: Once you have a GitHub ID, send it to Jane Koh on our Slack channel We will then find your ID and send you an invitation which should generate an email notification to the email you provided when you signed up for GitHub Follow the links in the email to accept the invitation How should I configure my GitHub account? As you'll learn in the next lesson, we will use the Cryospheric Sciences with ICESat-2 GitHub organization as a way to manage access to our cloud computing resources. In order for this to work each person must have public, rather than private membership in the ICESat-2hackweek organization. First, navigate to the \"People\" tab on the Cryospheric Sciences with ICESat-2 GitHub organization: Now, if you see \"Private\" to the right of your account, you will need to switch this to \"Public\": The steps for doing this are also well documented on this GitHub help page. How will GitHub repositories be structured? When you click on the \"Repositories\" tab in the Cryospheric Sciences with ICESat-2 GitHub Organization you will see a list of names, each of which links to a separate GitHub repository: Each repository is a container for a specific subset of material for this event. For example, we have a separate repository for each tutorial. There is a repository for the public-facing website you used to register for this event, and a repository for the wiki page. We'll also create new repositories for each project when we meet in person. How do I learn more? We encourage you to start practicing with Git and GitHub in advance of this event. Our tutorials will follow this lesson. Additional tutorial content from our past hackweeks is here . As always, feel free to post questions on Slack if you run into any difficulties!","title":"Lesson 1"},{"location":"github/#github","text":"","title":"GitHub"},{"location":"github/#what-is-gitgithub","text":"Git is a popular version control system that is the foundation of most open source software development. You are not required to know Git in advance of this event, but come prepared to learn a lot about it! GitHub is a hosting service for Git repositories, enabling us to share code across teams in a web environment.","title":"What is Git/GitHub?"},{"location":"github/#what-if-i-do-not-have-the-git-command-on-my-local-machine","text":"If you don't have Git installed on you local machine, you can download the latest installer on Git-SCM . More help for the install process can be found in the official Git documentation","title":"What if I do not have the git command on my local machine?"},{"location":"github/#why-do-i-need-a-github-account","text":"There are three reasons you are required to have a GitHub account for the hackweek: We use GitHub credentialing to give everyone access to our cloud computing resources All of our tutorials and project work will be shared on GitHub You will want a GitHub account to practice everything you'll be learning during the Git/GitHub tutorials So, if you don't already have a GitHub account, just navigate to GitHub : Then, click on the big green button and then answer a few required questions. Be sure to save your password somewhere safe because you will need it later!","title":"Why do I need a GitHub account?"},{"location":"github/#why-are-we-joining-a-github-organization","text":"GitHub organizations are a convenient way for teams to get all content relevant to a specific project our workshop into one place. By having everything in one central location you will spend less time searching for hackweek content. GitHub organizations have ``teams'' that offer simple ways to provide respository access to groups of people, rather than individuals. We have created a GitHub organization called Cryospheric Sciences with ICESat-2 . For security purposes you can only join the organization by invitation. Here are the steps: Once you have a GitHub ID, send it to Jane Koh on our Slack channel We will then find your ID and send you an invitation which should generate an email notification to the email you provided when you signed up for GitHub Follow the links in the email to accept the invitation","title":"Why are we joining a GitHub Organization?"},{"location":"github/#how-should-i-configure-my-github-account","text":"As you'll learn in the next lesson, we will use the Cryospheric Sciences with ICESat-2 GitHub organization as a way to manage access to our cloud computing resources. In order for this to work each person must have public, rather than private membership in the ICESat-2hackweek organization. First, navigate to the \"People\" tab on the Cryospheric Sciences with ICESat-2 GitHub organization: Now, if you see \"Private\" to the right of your account, you will need to switch this to \"Public\": The steps for doing this are also well documented on this GitHub help page.","title":"How should I configure my GitHub account?"},{"location":"github/#how-will-github-repositories-be-structured","text":"When you click on the \"Repositories\" tab in the Cryospheric Sciences with ICESat-2 GitHub Organization you will see a list of names, each of which links to a separate GitHub repository: Each repository is a container for a specific subset of material for this event. For example, we have a separate repository for each tutorial. There is a repository for the public-facing website you used to register for this event, and a repository for the wiki page. We'll also create new repositories for each project when we meet in person.","title":"How will GitHub repositories be structured?"},{"location":"github/#how-do-i-learn-more","text":"We encourage you to start practicing with Git and GitHub in advance of this event. Our tutorials will follow this lesson. Additional tutorial content from our past hackweeks is here . As always, feel free to post questions on Slack if you run into any difficulties!","title":"How do I learn more?"},{"location":"jupyterhub/","text":"Jupyter Hub Why are we using a shared cloud environment? Teaching software to a diverse group of participants, each with different computers and operating systems, can be challenging. As you'll learn in the next lesson, there are specific ways to configure our software for the tutorials to be successful, so it takes time to get everyone set up consistently. Our solution to this is to give everyone access to a cloud computing environment that is pre-configured for the specific software we will deploy. This cloud computing instance can be accessed from any web browser, which eliminates the need for configuring each person's individual computer. We will encourage you to use our shared resources for all the tutorials, and you can optionally use this for your projects as well. We also hope you will practice installing Python libraries locally on your laptop so that you can continue working after leaving our event (see our next lesson for details). How do I access the shared cloud environment? Access to our shared cloud environment is easy. Just click on https://aws-uswest2.pangeo.io Assuming you set up your GitHub credentials correctly (see the previous lesson), you can now click on the \"Sign in with GitHub\" button: It will take a little bit of time for this to load - be patient! Once things are spun up you will see your very own instance of a JupyterLab environment: What is Pangeo and how is this system configured? Pangeo is a community of researchers building open, reproducible and scalable scientific software tools. Several of us are involved in projects with NASA and NSF to build prototype systems to enable data discovery in the era of expanding data volume and complexity. For this hackweek have created virtual computing instances on Amazon Web Services that can be deployed on demand in a parallel computing environment. We use JupyterHub as a way to give a Jupyter Notebook server to each person in a group. These slides give a nice overview of what JupyterHub is all about. We use JupyterHub in an educational setting because it enables us to quickly begin working with code without spending time to get the necessary libraries and dependencies set up on everyone's individual computers. How do I get my code in and out of Pangeo? When you start your own instance of Pangeo you will have access to your own virtual drive space. No other Pangeo users will be able to see or access your data files. Next we will explain how you can upload files to your virtual drive space and how to save files from Pangeo back to another location, such as GitHub or your own local laptop drive. First we'll show you how to pull some files from GitHub into your virtual drive space. This will be a common task during the hackweek: at the start of each tutorial we'll ask you to \"clone\" (make a copy of) the GitHub repository corresponding to the specific tutorial being taught into your Pangeo drive space. To do this, we will need to interface with the file system of Pangeo. Pangeo is deployed in a Linux operating system and we will need to open a terminal within Pangeo to manage our files. There are two ways to do this: (1) Navigate to the \"File\" menu, choose \"New\" and then \"Terminal\" or (2) click on the \"terminal\" button in JupyterLab: This will open a new terminal tab in your JupyterLab interface: Now you can issue any Linux commands to manage your local file system. Now let's clone a repository (Note: we'll be teaching about Git clone during our introductory tutorials). This tutorial is built in a repository called \"preliminary\", so let's try cloning that. First, navigate in a browser on your own computer to the repository link here . Next, click on the green \"clone or download\" button and then copy the url into your clipboard by clicking the copy button: Now navigate back to your command line in JupyterLab. Type \"git clone\" and then paste in the url: A note about cutting and pasting Pasting something from your clipboard into the Pangeo terminal requires holding down the \"shift\" key and right-clicking. This is different from the usual Linux method that only requires a right click. After issuing the Git clone command you should see something like this: How do I end my Pangeo session? Will I lose all of my work? When you are finished working for the day it is important to explicitly log out of your Pangeo session. The reason for this is it will save us a bit of money! When you keep a session active it uses up AWS resources and keeps a series of virtual machines deployed. To stop the server, navigate to \"Hub --> Control Panel\" and then click the \"Stop my server\" button: logging out Logging out will NOT cause any of your work to be lost or deleted. It simply shuts down some resources. It would be equivalent to turning off your desktop computer at the end of the day.","title":"Lesson 2"},{"location":"jupyterhub/#jupyter-hub","text":"","title":"Jupyter Hub"},{"location":"jupyterhub/#why-are-we-using-a-shared-cloud-environment","text":"Teaching software to a diverse group of participants, each with different computers and operating systems, can be challenging. As you'll learn in the next lesson, there are specific ways to configure our software for the tutorials to be successful, so it takes time to get everyone set up consistently. Our solution to this is to give everyone access to a cloud computing environment that is pre-configured for the specific software we will deploy. This cloud computing instance can be accessed from any web browser, which eliminates the need for configuring each person's individual computer. We will encourage you to use our shared resources for all the tutorials, and you can optionally use this for your projects as well. We also hope you will practice installing Python libraries locally on your laptop so that you can continue working after leaving our event (see our next lesson for details).","title":"Why are we using a shared cloud environment?"},{"location":"jupyterhub/#how-do-i-access-the-shared-cloud-environment","text":"Access to our shared cloud environment is easy. Just click on https://aws-uswest2.pangeo.io Assuming you set up your GitHub credentials correctly (see the previous lesson), you can now click on the \"Sign in with GitHub\" button: It will take a little bit of time for this to load - be patient! Once things are spun up you will see your very own instance of a JupyterLab environment:","title":"How do I access the shared cloud environment?"},{"location":"jupyterhub/#what-is-pangeo-and-how-is-this-system-configured","text":"Pangeo is a community of researchers building open, reproducible and scalable scientific software tools. Several of us are involved in projects with NASA and NSF to build prototype systems to enable data discovery in the era of expanding data volume and complexity. For this hackweek have created virtual computing instances on Amazon Web Services that can be deployed on demand in a parallel computing environment. We use JupyterHub as a way to give a Jupyter Notebook server to each person in a group. These slides give a nice overview of what JupyterHub is all about. We use JupyterHub in an educational setting because it enables us to quickly begin working with code without spending time to get the necessary libraries and dependencies set up on everyone's individual computers.","title":"What is Pangeo and how is this system configured?"},{"location":"jupyterhub/#how-do-i-get-my-code-in-and-out-of-pangeo","text":"When you start your own instance of Pangeo you will have access to your own virtual drive space. No other Pangeo users will be able to see or access your data files. Next we will explain how you can upload files to your virtual drive space and how to save files from Pangeo back to another location, such as GitHub or your own local laptop drive. First we'll show you how to pull some files from GitHub into your virtual drive space. This will be a common task during the hackweek: at the start of each tutorial we'll ask you to \"clone\" (make a copy of) the GitHub repository corresponding to the specific tutorial being taught into your Pangeo drive space. To do this, we will need to interface with the file system of Pangeo. Pangeo is deployed in a Linux operating system and we will need to open a terminal within Pangeo to manage our files. There are two ways to do this: (1) Navigate to the \"File\" menu, choose \"New\" and then \"Terminal\" or (2) click on the \"terminal\" button in JupyterLab: This will open a new terminal tab in your JupyterLab interface: Now you can issue any Linux commands to manage your local file system. Now let's clone a repository (Note: we'll be teaching about Git clone during our introductory tutorials). This tutorial is built in a repository called \"preliminary\", so let's try cloning that. First, navigate in a browser on your own computer to the repository link here . Next, click on the green \"clone or download\" button and then copy the url into your clipboard by clicking the copy button: Now navigate back to your command line in JupyterLab. Type \"git clone\" and then paste in the url: A note about cutting and pasting Pasting something from your clipboard into the Pangeo terminal requires holding down the \"shift\" key and right-clicking. This is different from the usual Linux method that only requires a right click. After issuing the Git clone command you should see something like this:","title":"How do I get my code in and out of Pangeo?"},{"location":"jupyterhub/#how-do-i-end-my-pangeo-session-will-i-lose-all-of-my-work","text":"When you are finished working for the day it is important to explicitly log out of your Pangeo session. The reason for this is it will save us a bit of money! When you keep a session active it uses up AWS resources and keeps a series of virtual machines deployed. To stop the server, navigate to \"Hub --> Control Panel\" and then click the \"Stop my server\" button: logging out Logging out will NOT cause any of your work to be lost or deleted. It simply shuts down some resources. It would be equivalent to turning off your desktop computer at the end of the day.","title":"How do I end my Pangeo session? Will I lose all of my work?"},{"location":"numpy/","text":"Intro to Numpy This lesson provides an introduction to numpy. list learning objectives Reading Assignment (optional) (15 minutes) If you are a beginner Python programmer making the transition from Matlab, read this article . Practical Assignment (30 minutes) Work through this Introduction to Numpy .","title":"Lesson 5"},{"location":"numpy/#intro-to-numpy","text":"This lesson provides an introduction to numpy. list learning objectives","title":"Intro to Numpy"},{"location":"numpy/#reading-assignment-optional-15-minutes","text":"If you are a beginner Python programmer making the transition from Matlab, read this article .","title":"Reading Assignment (optional) (15 minutes)"},{"location":"numpy/#practical-assignment-30-minutes","text":"Work through this Introduction to Numpy .","title":"Practical Assignment (30 minutes)"},{"location":"pandas/","text":"Intro to Pandas This lesson provides an introduction to pandas. list learning objectives Practical Assignment (30 minutes) Work through this Introduction to Pandas .","title":"Lesson 6"},{"location":"pandas/#intro-to-pandas","text":"This lesson provides an introduction to pandas. list learning objectives","title":"Intro to Pandas"},{"location":"pandas/#practical-assignment-30-minutes","text":"Work through this Introduction to Pandas .","title":"Practical Assignment (30 minutes)"}]}